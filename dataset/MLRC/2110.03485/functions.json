{"functions": [{"paper_id": "2110.03485", "func_id": "0", "file": "cartoonx/cartoonX.py", "name": "step", "header_line": "42", "line_start": "43", "line_end": "91", "relevant_paper": "CartoonX, as described in Algorithm \\ref{alg: cartoon RDE}, computes the RDE mask in the wavelet domain of images. More precisely, for the data representation $x = f(h)$,\nwe choose $h$ as the concatenation of all the DWT coefficients along the channels, \\ie, $h_i\\in\\R^{c}$. The representation function $f$ is then the discrete inverse wavelet transform, \\ie, the summation of the DWT coefficients times the DWT basis vectors. We optimize the mask $s\\in[0,1]^k$ on the DWT coefficients $[h_1,\\hdots,h_k]^T$ to minimize RDE's $\\ell_1$-relaxation from Definition \\ref{def:ell_1 relaxation}. For the obfuscation strategy $\\mathcal{V}$, we use adaptive Gaussian noise with a partition by the DWT scale (see Section \\ref{subsubsec: obfuscation strategies}), \\ie, we compute the empirical mean and standard deviation per scale. %We measure distortion as the squared difference in the post-softmax score of the predicted label for $x$ (see Section \\ref{subsubsec: measures of distortion}).\nTo visualize the final DWT mask $s$ as a piece-wise smooth image in pixel space, we multiply the mask with the DWT coefficients of the greyscale image $\\hat x$ of $x$ before inverting the product back to pixel space with the inverse DWT. The pixel values of the inversion are finally clipped into $[0,1]$ as are obfuscations during the RDE optimization to avoid overflow (we assume here the pixel values in $x$ are normalized into $[0,1]$). The clipped inversion in pixel space is the final CartoonX explanation.\n\n\n\\RestyleAlgo{ruled} \n\\SetKwInput{kwHparams}{Hyperparameters}\n\\SetKwInput{kwInit}{Initialization}\n\n\\begin{algorithm}[hbt!]\n\n\\caption{CartoonX}\\label{alg: cartoon RDE}\n\\KwData{Image $x\\in[0,1]^n$ with $c$ channels and $k$ pixels, pre-trained classifier $\\Phi$.}\n \\kwInit{Initialize mask $s\\coloneqq[1,...,1]^T$ on\\\\ \\\\ DWT coefficients $h=[h_1,...,h_k]^T$ with $x=f(h)$, where $f$ is the inverse DWT. Choose sparsity level $\\lambda>0$, number of steps $N$,  number of noise samples $L$, and measure of distortion $d$.}\n  \\For{$i\\gets1$ \\KwTo $N$}{\n    Sample $L$ adaptive Gaussian noise samples $v^{(1)},...,v^{(L)}\\sim \\mathcal{N}(\\mu,\\sigma^2)$\\;\n    Compute obfuscations $y^{(1)},..., y^{(L)}$ with $y^{(i)}\\coloneqq f(h\\odot s + (1-s)\\odot v^{(i)})$\\;\n    Clip obfuscations into $[0,1]^{n}$\\;\n    Approximate expected distortion $\\hat D(x,s,\\Phi)\\coloneqq \\sum_{i=1}^Ld(\\Phi(x),\\Phi(y^{(i)}))^2/L$\\;\n    Compute loss for the mask, \\ie, $\\ell(s)\\coloneqq \\hat D(x,s,\\Phi) + \\lambda \\|s\\|_1$\\;\n    Update mask $s$ with gradient descent step using $\\nabla_s \\ell(s)$ and clip $s$ back to $[0,1]^{k}$\\;\n    }\n    Get DWT coefficients $\\hat h$ for greyscale image $\\hat x$ of $x$\\;\n    Set ${\\mathcal{E}}\\coloneqq f(\\hat h \\odot s)$ and finally clip ${\\mathcal{E}}$ into $[0,1]^{k}$\\;\n\\end{algorithm}"}, {"paper_id": "2110.03485", "func_id": "1", "file": "cartoonx/cartoonX.py", "name": "get_distortion", "header_line": "93", "line_start": "94", "line_end": "119", "relevant_paper": ""}, {"paper_id": "2110.03485", "func_id": "2", "file": "cartoonx/cartoonX.py", "name": "get_scaled_mask", "header_line": "121", "line_start": "122", "line_end": "128", "relevant_paper": ""}, {"paper_id": "2110.03485", "func_id": "3", "file": "cartoonx/cartoonX.py", "name": "initialize_dwt_mask", "header_line": "130", "line_start": "131", "line_end": "218", "relevant_paper": ""}, {"paper_id": "2110.03485", "func_id": "4", "file": "cartoonx/cartoonX.py", "name": "__call__", "header_line": "220", "line_start": "221", "line_end": "376", "relevant_paper": ""}]}